import React, { useEffect, useRef, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import * as FileSystem from "expo-file-system"; // ✅ perbaikan import
import Fomm from "../app/formm";

// Typings
interface Input {
  id: number;
  nama_pengirim: string;
  alamat_pengirim: string;
  no_telp_pengirim: string;
  nama_penerima: string;
  alamat_penerima: string;
  no_telp_penerima: string;
  jenis_barang: string;
  berat_barang: number;
  ekspedisi: string;
  jenis_layanan: string;
  no_resi: string;
  biaya: number;
  status: string;
  status_pembayaran?: string;
  payment_at?: string;
}

// ✅ Komponen tabel dengan forwardRef
const PaginateTable = React.forwardRef(
  (
    { columns = [], input = "" }: { columns?: any[]; input?: string },
    ref: any
  ) => {
    const [data, setData] = useState<any[]>([]);

    const fetchData = async () => {
      if (!input) return;
      try {
        const res = await axios.get("/input");
        const result = Array.isArray(res.data)
          ? res.data
          : res.data.data ?? [];
        setData(result);
      } catch (err) {
        console.error("Gagal load data:", err);
      }
    };

    React.useImperativeHandle(ref, () => ({
      refetch: fetchData,
    }));

    useEffect(() => {
      fetchData();
    }, [input]);

    return (
      <table className="table table-bordered table-striped">
        <thead>
          <tr>
            {(columns ?? []).map((col, idx) => (
              <th key={idx}>{col.header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.length === 0 ? (
            <tr>
              <td colSpan={(columns ?? []).length || 1} className="text-center">
                Tidak ada data
              </td>
            </tr>
          ) : (
            data.map((row, i) => (
              <tr key={i}>
                {(columns ?? []).map((col, idx) => (
                  <td key={idx}>
                    {col.cell
                      ? col.cell({ row: { original: row } })
                      : row[col.accessorKey]}
                  </td>
                ))}
              </tr>
            ))
          )}
        </tbody>
      </table>
    );
  }
);

const InputOrders: React.FC = () => {
  const paginateRef = useRef<any>(null);
  const [loadingCity, setLoadingCity] = useState(false); // ✅ state untuk Fomm

  const refresh = () => paginateRef.current?.refetch?.();

  // ✅ fungsi download struk
  const downloadReceipt = async (noResi: string) => {
    try {
      setLoadingCity(true);
      const uri = `/download-resi/${noResi}`;
      const fileUri = FileSystem.documentDirectory + `struk-${noResi}.pdf`;

      const { uri: localUri } = await FileSystem.downloadAsync(uri, fileUri);
      console.log("File downloaded to:", localUri);

      Swal.fire("Berhasil", "Struk berhasil diunduh", "success");
    } catch (error) {
      console.error("Download gagal:", error);
      Swal.fire("Error", "Gagal mengunduh struk", "error");
    } finally {
      setLoadingCity(false);
    }
  };

  const redirectToPayment = async (id: number) => {
    try {
      const { data } = await axios.get(`/payment/token/${id}`);
      const snapToken = data.snap_token;

      if (!snapToken) {
        Swal.fire({ icon: "error", title: "Token Tidak Tersedia" });
        return;
      }

      if (typeof window.snap === "undefined") {
        Swal.fire({ icon: "error", title: "Snap Belum Siap" });
        return;
      }

      window.snap.pay(snapToken, {
        onSuccess: async (result: any) => {
          await axios.post("/manual-update-status", {
            order_id: result.order_id,
            transaction_status: result.transaction_status,
            payment_type: result.payment_type,
          });
          Swal.fire({
            icon: "success",
            title: "Pembayaran Berhasil",
          }).then(refresh);
        },
        onPending: async (result: any) => {
          await axios.post("/manual-update-status", {
            order_id: result.order_id,
            transaction_status: result.transaction_status,
            payment_type: result.payment_type,
          });
          Swal.fire({ icon: "info", title: "Menunggu Pembayaran" });
        },
        onError: () => {
          Swal.fire({ icon: "error", title: "Pembayaran Gagal" });
        },
        onClose: () => {
          Swal.fire({ icon: "warning", title: "Dibatalkan" });
        },
      });
    } catch (error) {
      console.error("❌ Gagal ambil token:", error);
      Swal.fire({ icon: "error", title: "Error mengambil token" });
    }
  };

  // ✅ load snap.js sekali
  useEffect(() => {
    if (!window.snap) {
      const script = document.createElement("script");
      script.src = "https://app.sandbox.midtrans.com/snap/snap.js";
      script.setAttribute("data-client-key", "SB-Mid-client-XXXXX"); // ganti sesuai key kamu
      script.async = true;
      document.body.appendChild(script);
    }
  }, []);

  return (
    <div className="card">
      <div className="card-header d-flex align-items-center">
        <h2 className="mb-0">Halaman Data Input</h2>
        <a href="/formm" className="btn btn-sm btn-primary ms-auto">
          Tambah <i className="la la-plus"></i>
        </a>
      </div>

      <div className="card-body">
        <PaginateTable
          ref={paginateRef}
          input="/input"
          columns={[
            { header: "No", accessorKey: "id" },
            { header: "Pengirim", accessorKey: "nama_pengirim" },
            { header: "Alamat Pengirim", accessorKey: "alamat_pengirim" },
            { header: "Penerima", accessorKey: "nama_penerima" },
            { header: "Alamat Penerima", accessorKey: "alamat_penerima" },
            { header: "No Resi", accessorKey: "no_resi" },
            {
              header: "Status",
              accessorKey: "status",
              cell: ({ row }: any) => (
                <span className="badge bg-secondary">{row.original.status}</span>
              ),
            },
            {
              header: "Pembayaran",
              accessorKey: "status_pembayaran",
              cell: ({ row }: any) => {
                const status = row.original.status_pembayaran?.toLowerCase();
                const map: Record<string, string> = {
                  settlement: "badge bg-success fw-bold",
                  pending: "badge bg-warning text-dark fw-bold",
                  expire: "badge bg-secondary fw-bold",
                  failure: "badge bg-danger fw-bold",
                  refund: "badge bg-info text-dark fw-bold",
                };

                return (
                  <span className={map[status] ?? "badge bg-secondary fw-bold"}>
                    {status ?? "Belum Bayar"}
                  </span>
                );
              },
            },
            {
              header: "Struk",
              id: "struk",
              cell: ({ row }: any) => (
                <button
                  className="btn btn-sm btn-secondary"
                  onClick={() => downloadReceipt(row.original.no_resi)}
                >
                  <i className="la la-download me-1" />
                  Download
                </button>
              ),
            },
            {
              header: "Aksi",
              id: "aksi",
              cell: ({ row }: any) => {
                const status = row.original.status_pembayaran?.toLowerCase();
                const canPay =
                  !row.original.payment_at && status !== "settlement";

                return canPay ? (
                  <button
                    className="btn btn-sm btn-success me-1"
                    onClick={() => redirectToPayment(row.original.id)}
                  >
                    <i className="bi bi-credit-card me-1" />
                    Bayar
                  </button>
                ) : null;
              },
            },
          ]}
        />

        {/* ✅ Tampilkan form di bawah tabel */}
        <Fomm loadingCity={loadingCity} />
      </div>
    </div>
  );
};

export default InputOrders;
