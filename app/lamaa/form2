import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import axios from "axios";
import Swal from "sweetalert2";
import { toast } from "react-toastify";

interface Province { id: string; name: string }
interface City { id: string; name: string }
interface District { id: string; name: string }
interface Service { service: string; description: string; cost: number; etd: string }

const couriers = [
  { code: "jne", name: "JNE" },
  { code: "tiki", name: "TIKI" },
  { code: "pos", name: "POS" },
];

const schema = Yup.object().shape({
  nama_pengirim: Yup.string().required("Nama Pengirim harus diisi"),
  alamat_pengirim: Yup.string().required("Alamat Pengirim harus diisi"),
  no_telp_pengirim: Yup.string().required("No. Telp Pengirim harus diisi"),
  nama_penerima: Yup.string().required("Nama Penerima harus diisi"),
  alamat_penerima: Yup.string().required("Alamat Penerima harus diisi"),
  no_telp_penerima: Yup.string().required("No. Telp Penerima harus diisi"),
  ekspedisi: Yup.string().required("Ekspedisi harus dipilih"),
  jenis_barang: Yup.string().required("Jenis Barang harus diisi"),
  jenis_layanan: Yup.string().required("Jenis Layanan harus diisi"),
  berat_barang: Yup.number().required().min(0.1, "Berat minimal 0.1 Kg"),
});

export default function InputForm() {
  const { register, handleSubmit, watch, formState: { errors }, reset } = useForm({
    resolver: yupResolver(schema),
  });

  // state lokasi
  const [provinces, setProvinces] = useState<Province[]>([]);
  const [citiesOrigin, setCitiesOrigin] = useState<City[]>([]);
  const [citiesDestination, setCitiesDestination] = useState<City[]>([]);
  const [districtsOrigin, setDistrictsOrigin] = useState<District[]>([]);
  const [districtsDestination, setDistrictsDestination] = useState<District[]>([]);

  // state ongkir
  const [services, setServices] = useState<Service[]>([]);
  const [biaya, setBiaya] = useState<number>(0);

  // watch form value
  const ekspedisi = watch("ekspedisi");
  const beratBarang = watch("berat_barang");
  const districtOrigin = watch("asal_kecamatan_id");
  const districtDestination = watch("tujuan_kecamatan_id");
  const selectedService = watch("jenis_layanan");

  // ambil provinsi
  useEffect(() => {
    axios.get("/provinces").then(res => {
      const provs = Object.entries(res.data).map(([id, name]) => ({ id, name: name as string }));
      setProvinces(provs);
    });
  }, []);

  const fetchCities = async (provId: string, type: "origin" | "destination") => {
    if (!provId || provId === "0") return;
    const res = await axios.get(`/cities/${provId}`);
    const data = Object.entries(res.data).map(([id, name]) => ({ id, name: name as string }));
    if (type === "origin") setCitiesOrigin(data); else setCitiesDestination(data);
  };

  const fetchDistricts = async (cityId: string, type: "origin" | "destination") => {
    if (!cityId) return;
    const res = await axios.get(`/districts/${cityId}`);
    const data = Object.entries(res.data).map(([id, name]) => ({ id, name: name as string }));
    if (type === "origin") setDistrictsOrigin(data); else setDistrictsDestination(data);
  };

  // ambil ongkir
  useEffect(() => {
    const fetchOngkir = async () => {
      if (!districtOrigin || !districtDestination || !ekspedisi || !beratBarang) return;
      try {
        const res = await axios.post("/cost", {
          origin: districtOrigin,
          destination: districtDestination,
          weight: Math.round(beratBarang * 1000),
          courier: ekspedisi,
          price: "lowest"
        });
        const sv = res.data.map((s: any) => ({
          service: s.service,
          description: s.description,
          cost: s.cost,
          etd: s.etd,
        }));
        setServices(sv);
        setBiaya(0);
      } catch {
        toast.error("Gagal mengambil ongkir");
      }
    };
    fetchOngkir();
  }, [districtOrigin, districtDestination, ekspedisi, beratBarang]);

  const onSubmit = async (data: any) => {
    const noResi = generateNoResi();
    const formData = new FormData();
    Object.entries(data).forEach(([k, v]) => formData.append(k, String(v)));
    formData.append("biaya", biaya.toString());
    formData.append("no_resi", noResi);
    formData.append("status", "menunggu");

    try {
      await axios.post("/input/store", formData, {
        headers: { "Content-Type": "multipart/form-data" }
      });
      Swal.fire({
        icon: "success",
        title: "Berhasil!",
        html: `
          <div style="text-align:left">
            <p><strong>No. Resi:</strong> ${noResi}</p>
            <p><strong>Biaya Pengiriman:</strong> Rp ${biaya.toLocaleString("id-ID")}</p>
            <p><strong>Ekspedisi:</strong> ${data.ekspedisi.toUpperCase()}</p>
          </div>`
      }).then(() => {
        toast.success("Data berhasil disimpan");
        reset();
      });
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Terjadi kesalahan.");
    }
  };

  function generateNoResi() {
    const prefix = "RESI";
    const timestamp = Date.now().toString();
    const random = Math.floor(1000 + Math.random() * 9000);
    return `${prefix}-${timestamp}-${random}`;
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="p-4 bg-white shadow rounded-xl space-y-4">
      <h2 className="text-xl font-bold">Tambah Input</h2>

      {/* Pengirim */}
      <div>
        <label>Nama Pengirim</label>
        <input {...register("nama_pengirim")} className="form-input" />
        <p className="text-red-500">{errors.nama_pengirim?.message}</p>
      </div>
      <div>
        <label>Alamat Pengirim</label>
        <input {...register("alamat_pengirim")} className="form-input" />
        <p className="text-red-500">{errors.alamat_pengirim?.message}</p>
      </div>
      <div>
        <label>No Telp Pengirim</label>
        <input {...register("no_telp_pengirim")} className="form-input" />
        <p className="text-red-500">{errors.no_telp_pengirim?.message}</p>
      </div>

      {/* Lokasi asal */}
      <div>
        <label>Provinsi Asal</label>
        <select {...register("asal_provinsi_id")} onChange={e => fetchCities(e.target.value, "origin")}>
          <option value="0">-- Pilih Provinsi --</option>
          {provinces.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
        </select>
      </div>
      <div>
        <label>Kota Asal</label>
        <select {...register("asal_kota_id")} onChange={e => fetchDistricts(e.target.value, "origin")}>
          <option value="">-- Pilih Kota --</option>
          {citiesOrigin.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
        </select>
      </div>
      <div>
        <label>Kecamatan Asal</label>
        <select {...register("asal_kecamatan_id")}>
          <option value="">-- Pilih Kecamatan --</option>
          {districtsOrigin.map(d => <option key={d.id} value={d.id}>{d.name}</option>)}
        </select>
      </div>

      {/* Penerima */}
      <div>
        <label>Nama Penerima</label>
        <input {...register("nama_penerima")} className="form-input" />
        <p className="text-red-500">{errors.nama_penerima?.message}</p>
      </div>
      <div>
        <label>Alamat Penerima</label>
        <input {...register("alamat_penerima")} className="form-input" />
        <p className="text-red-500">{errors.alamat_penerima?.message}</p>
      </div>
      <div>
        <label>No Telp Penerima</label>
        <input {...register("no_telp_penerima")} className="form-input" />
        <p className="text-red-500">{errors.no_telp_penerima?.message}</p>
      </div>

      {/* Lokasi tujuan */}
      <div>
        <label>Provinsi Tujuan</label>
        <select {...register("tujuan_provinsi_id")} onChange={e => fetchCities(e.target.value, "destination")}>
          <option value="0">-- Pilih Provinsi --</option>
          {provinces.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
        </select>
      </div>
      <div>
        <label>Kota Tujuan</label>
        <select {...register("tujuan_kota_id")} onChange={e => fetchDistricts(e.target.value, "destination")}>
          <option value="">-- Pilih Kota --</option>
          {citiesDestination.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
        </select>
      </div>
      <div>
        <label>Kecamatan Tujuan</label>
        <select {...register("tujuan_kecamatan_id")}>
          <option value="">-- Pilih Kecamatan --</option>
          {districtsDestination.map(d => <option key={d.id} value={d.id}>{d.name}</option>)}
        </select>
      </div>

      {/* Barang */}
      <div>
        <label>Jenis Barang</label>
        <input {...register("jenis_barang")} className="form-input" />
        <p className="text-red-500">{errors.jenis_barang?.message}</p>
      </div>
      <div>
        <label>Berat Barang (Kg)</label>
        <input type="number" step="0.1" {...register("berat_barang")} className="form-input" />
        <p className="text-red-500">{errors.berat_barang?.message}</p>
      </div>

      {/* Ekspedisi */}
      <div>
        <label>Ekspedisi</label>
        <select {...register("ekspedisi")}>
          <option value="">-- Pilih Ekspedisi --</option>
          {couriers.map(c => <option key={c.code} value={c.code}>{c.name}</option>)}
        </select>
        <p className="text-red-500">{errors.ekspedisi?.message}</p>
      </div>

      <div>
        <label>Jenis Layanan</label>
        <select {...register("jenis_layanan")} onChange={e => {
          const svc = services.find(s => s.service === e.target.value);
          setBiaya(svc?.cost || 0);
        }}>
          <option value="">{services.length === 0 ? "Tidak ada layanan" : "Pilih layanan"}</option>
          {services.map(s => (
            <option key={s.service} value={s.service}>
              {s.service} - Rp{s.cost.toLocaleString()} ({s.etd} Hari)
            </option>
          ))}
        </select>
        <p className="text-red-500">{errors.jenis_layanan?.message}</p>
      </div>

      <div>
        <label>Biaya</label>
        <input type="text" value={biaya ? biaya.toLocaleString("id-ID") : "-"} readOnly className="form-input" />
      </div>

      <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-lg">
        Simpan & Dapatkan No. Resi
      </button>
    </form>
  );
}
